{"version":3,"sources":["Header.js","firebase.js","dropdownMenu.js","Selection.js","Comments.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","children","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dropdownMenu","cuisine","restaurant","picture","alt","Selection","handleChange","e","setState","userSelection","target","value","selection","filter","item","state","selectedItem","console","log","this","className","htmlFor","id","name","onChange","required","map","key","onClick","displayResult","Component","Comments","userChoice","preventDefault","showForm","user","input","handleClick","database","ref","push","deleteComment","child","remove","comments","dbRef","on","snapshot","data","val","userComments","userName","allItems","action","style","display","placeholder","rows","cols","piece","Footer","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.19cc05c6.chunk.js","sourcesContent":["// add header to the page\r\nimport React from \"react\";\r\n\r\nconst Header = (props)=>{\r\n  return (\r\n    <header>\r\n      {props.children}\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\n const firebaseConfig = {\r\n   apiKey: \"AIzaSyC5dBqodpJPXD5yirLGYMYmPCY__x5SA94\",\r\n   authDomain: \"rachelprojectfive.firebaseapp.com\",\r\n   databaseURL: \"https://rachelprojectfive.firebaseio.com\",\r\n   projectId: \"rachelprojectfive\",\r\n   storageBucket: \"rachelprojectfive.appspot.com\",\r\n   messagingSenderId: \"171614267684\",\r\n   appId: \"1:171614267684:web:784e642877bc3cdedd6bb1\",\r\n };\r\n // Initialize Firebase\r\n firebase.initializeApp(firebaseConfig);\r\n\r\n export default firebase;\r\n\r\n","const dropdownMenu = [\r\n  {\r\n    cuisine: \"Thai\",\r\n    restaurant: \"EAT BKK\",\r\n    picture:\r\n      \"https://www.eatbkk.ca/wp-content/uploads/2018/09/42194716_10156607850029076_3483010978595995648_n.jpg\",\r\n    alt:\"a Thai restaurant with colorful chairs and tables\"\r\n  },\r\n  {\r\n    // for demonstration purpose\r\n    cuisine: \"Thai\",\r\n    restaurant: \"Good Thai\",\r\n    picture:\r\n      \"https://www.eatbkk.ca/wp-content/uploads/2018/09/42194716_10156607850029076_3483010978595995648_n.jpg\",\r\n    alt: \"a Thai restaurant with colorful chairs and tables\"\r\n  },\r\n  {\r\n    cuisine: \"Chinese\",\r\n    restaurant: \"Dragon Pearl\",\r\n    picture:\r\n      \"https://www.dragonpearlbuffet.com/wp-content/uploads/2014/03/long-table.jpg\",\r\n    alt:\"traditional Chinese style restaurant with red decorations\"\r\n\r\n\r\n  },\r\n  {\r\n    cuisine: \"Italian\",\r\n    restaurant: \"Luci Restaurant\",\r\n\r\n    picture:\r\n      \"https://i.pinimg.com/originals/9f/51/7f/9f517f58e7444f2eda191bfeea06af47.jpg\",\r\n    alt:\"Italian style restaurant with dark light\"\r\n  },\r\n  {\r\n    cuisine: \"Indian\",\r\n    restaurant: \"Tich Indian\",\r\n    picture:\r\n      \"https://torontolife.com/wp-content/uploads/2015/03/tich-toronto-restaurants-02.jpg\",\r\n    alt:\"fine dining - Indian style restaurant\"\r\n  },\r\n];\r\n\r\nexport default dropdownMenu;\r\n","import React, { Component } from \"react\";\r\nimport dropdownMenu from \"./dropdownMenu.js\";\r\n\r\nclass Selection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userSelection: \"\",\r\n      selectedItem: [],\r\n    };\r\n  }\r\n  // get user's selection\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ userSelection: e.target.value }, () => {\r\n      const selection = dropdownMenu.filter((item) => {\r\n        return item.cuisine === this.state.userSelection;\r\n      });\r\n      this.setState({ selectedItem: selection }, () => {\r\n        console.log(this.state.selectedItem);\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { userSelection, selectedItem } = this.state;\r\n\r\n    return (\r\n      // create a dropdown menu for cuisines(by region)\r\n\r\n      <main className=\"selection\">\r\n        <label htmlFor=\"cuisines\">Choose a cuisine: </label>\r\n        <select\r\n          id=\"cuisines\"\r\n          name=\"cuisines\"\r\n          value={userSelection}\r\n          onChange={this.handleChange}\r\n          required\r\n        >\r\n          <option value=\"\">Choose...</option>\r\n\r\n          <option value=\"Thai\">Thai</option>\r\n          <option value=\"Chinese\">Chinese</option>\r\n          <option value=\"Italian\">Italian</option>\r\n          <option value=\"Indian\">Indian</option>\r\n        </select>\r\n\r\n        {/* create a dropdown menu for restaurants */}\r\n        <label htmlFor=\"restaurants\">Choose a restaurant: </label>\r\n        <select id=\"restaurants\" name=\"restaurants\" required>\r\n          <option value=\"\">Choose...</option>\r\n\r\n          {this.state.selectedItem.map((item) => {\r\n            return (\r\n              <option key={item.id} value={item.restaurant}>\r\n                {item.restaurant}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n        <div>\r\n          <button onClick={(e) => this.props.displayResult(e, selectedItem)}>\r\n            write a review\r\n          </button>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Selection;\r\n","// this part is for user comments\r\nimport React, { Component } from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport Selection from \"./Selection\";\r\nclass Comments extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      comments: [],\r\n      user: {\r\n        name: \"\",\r\n        input: \"\",\r\n        restaurant: \"\",\r\n      },\r\n      showForm: false\r\n      \r\n    };\r\n  }\r\n\r\n  displayResult = (e, userChoice) => {\r\n    e.preventDefault();\r\n    const restaurant = userChoice[0].restaurant;\r\n    this.setState({ showForm: true });\r\n    this.setState({ user: { ...this.state.user, restaurant: restaurant} });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // pull data from firebase\r\n    const dbRef = firebase.database().ref();\r\n    console.log(dbRef);\r\n    dbRef.on(\"value\", (snapshot) => {\r\n      const data = snapshot.val();\r\n      const userComments = [];\r\n\r\n      for (let userName in data) {\r\n        const allItems = {\r\n          id: userName,\r\n          user: {\r\n            name: data[userName].name,\r\n            input: data[userName].input,\r\n            restaurant:data[userName].restaurant\r\n          },\r\n        };\r\n        userComments.push(allItems);\r\n        console.log(allItems);\r\n      }\r\n\r\n      this.setState({ comments: userComments });\r\n    });\r\n  }\r\n\r\n  userChoice = (e) => {\r\n    this.setState({ user: { ...this.state.user, name: e.target.value } });\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({ user: { ...this.state.user, input: e.target.value } });\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.push(this.state.user);\r\n\r\n    this.setState({ user: { name: \"\", input: \"\",restaurant:\"\" } });\r\n  };\r\n\r\n  deleteComment = (id) => {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.child(id).remove();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // get user's comments\r\n      <section className=\"userInput\">\r\n        <Selection displayResult={this.displayResult} />\r\n        <form\r\n          action=\"submit\"\r\n          style={{ display: this.state.showForm ? \"block\" : \"none\" }}\r\n        >\r\n          {/* <div><label htmlFor=\"name\" className=\"sr-only\">\r\n            name\r\n          </label> */}\r\n          \r\n          <div>\r\n          <input\r\n            id=\"name\"\r\n            placeholder=\"username...\"\r\n            value={this.state.user.name}\r\n            onChange={this.userChoice}\r\n          />\r\n          </div>\r\n          {/* <label htmlFor=\"comments\" className=\"sr-only\">\r\n            comments\r\n          </label> */}\r\n\r\n          <textarea\r\n            id=\"comments\"\r\n            rows=\"5\"\r\n            cols=\"40\"\r\n            value={this.state.user.input}\r\n            placeholder=\"say something!\"\r\n            onChange={this.handleChange}\r\n            required\r\n          />\r\n\r\n          <div>\r\n            <button onClick={this.handleClick}>post review</button>\r\n          </div>\r\n        </form>\r\n        <ul className=\"listItem\">\r\n          {/* map through each comment inside of comments array */}\r\n          {this.state.comments.map((piece) => {\r\n            return (\r\n              <li key={piece.id}>\r\n                <h2><span>{piece.user.restaurant}</span></h2>\r\n                <p>ID: {piece.user.name}</p>\r\n                <p>{piece.user.input}</p>\r\n\r\n                <div className=\"btn\">\r\n                  <button\r\n                    onClick={() => {\r\n                      this.deleteComment(piece.id);\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;\r\n","import React from 'react';\r\n\r\nconst Footer =(props)=>{\r\n return(\r\n  <section className=\"footer\">\r\n   <p>{props.footer}</p>\r\n\r\n  </section>\r\n )\r\n}\r\nexport default Footer;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Comments from \"./Comments\";\nimport Footer from './Footer';\n\nclass App extends Component {\n  \n    \n  \n\n  render() {\n    return (\n      <div className=\" wrapper App\">\n        {/* add a Header to page */}\n        <Header>\n          <h1>\n            Reviews\n            <span>\n              <i className=\"fas fa-utensils\"></i>\n            </span>\n          </h1>\n        </Header>\n        <Comments/>\n        <Footer footer=\"created by Rachel Jiang 2020\"/>      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}