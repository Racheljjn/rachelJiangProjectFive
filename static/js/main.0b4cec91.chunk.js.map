{"version":3,"sources":["Header.js","dropdownMenu.js","Main.js","Rating.js","Comments.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","header","this","Component","dropdownMenu","restaurant","picture","Main","state","cuisine","resaturant","display","handleChange","bind","handleClick","console","log","e","setState","target","value","src","alt","htmlFor","idOne","id","onChange","idTwo","onClick","Star","selected","onSelect","f","color","StarRating","length","totalStars","useState","selectedStars","setSelectedStars","Array","map","n","i","key","Comments","type","placeholder","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAgBeA,G,kLAZCC,GACZ,OAAOA,EAAMC,S,+BAGb,OACE,gCACE,4BAAKC,KAAKF,MAAMC,a,GAPHE,c,OCmBNC,EAtBM,CACnB,CACEC,WAAY,UACdC,QAAS,yGAET,CACED,WAAY,kBACZC,QACE,uHAEJ,CACED,WAAY,gBACZC,QACE,qHAEJ,CACED,WAAY,eACZC,QACE,qHCyDSC,E,kDAxEb,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,QAAS,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnBE,QAAQC,IAAR,gBATiB,E,yDAYNC,GACXf,KAAKgB,SAAS,CAAET,QAASQ,EAAEE,OAAOC,QAEX,SAAnBH,EAAEE,OAAOC,OACXlB,KAAKgB,SAAS,CAAER,WAAY,c,oCAI9BR,KAAKgB,SAAS,CACZP,QACE,6BACG,IACD,gCAAMP,EAAa,GAAGC,YACtB,yBACEgB,IAAKjB,EAAa,GAAGE,QACrBgB,IAAI,0G,+BAQZ,OAEE,8BACE,2BAAOC,QAASrB,KAAKF,MAAMwB,OAA3B,sBACA,4BACEC,GAAIvB,KAAKF,MAAMwB,MACfJ,MAAOlB,KAAKM,MAAMC,QAClBiB,SAAUxB,KAAKU,cAEf,4BAAQQ,MAAM,aAAd,aACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,WAGF,2BAAOG,QAASrB,KAAKF,MAAM2B,OAA3B,yBACA,4BACEF,GAAIvB,KAAKF,MAAM2B,MACfP,MAAOlB,KAAKM,MAAME,WAClBgB,SAAUxB,KAAKU,cAEf,4BAAQQ,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,mBAAd,oBAEF,4BAAQQ,QAAS1B,KAAKY,aAAtB,UAEA,6BAEGZ,KAAKM,MAAMG,c,GAlEHR,a,wBCEb0B,EAAO,SAAC,GAAD,QAAGC,gBAAH,aAAqBC,gBAArB,MAAgC,SAACC,GAAD,OAAOA,GAAvC,SACX,kBAAC,IAAD,CAAQC,MAAOH,EAAW,MAAQ,OAAQF,QAASG,KAqBtCG,MAhBf,YAAyC,IAFpBC,EAEmB,IAAlBC,kBAAkB,MAAL,EAAK,IACIC,mBAAS,GADb,mBAC/BC,EAD+B,KAChBC,EADgB,KAEtC,OACE,qCALiBJ,EAMFC,EANC,YAAgBI,MAAML,KAMXM,KAAI,SAACC,EAAGC,GAAJ,OAC3B,kBAAC,EAAD,CACEC,IAAKD,EACLb,SAAUQ,EAAgBK,EAC1BZ,SAAU,kBAAMQ,EAAiBI,EAAI,WCNhCE,E,uKARX,OACE,iCACE,2BAAOC,KAAK,WAAWC,YAAY,2B,GAJpB5C,aCkBR6C,E,uKAXX,OACE,yBAAKC,UAAU,gBACb,kBAAC,EAAD,CAAQhD,OAAO,YACf,kBAAC,EAAD,CAAMuB,MAAM,WAAWG,MAAM,gBAC7B,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPUxB,aCKE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.0b4cec91.chunk.js","sourcesContent":["// add header to the page\r\nimport React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  displayHeader(props) {\r\n    return props.header;\r\n  }\r\n  render() {\r\n    return (\r\n      <header>\r\n        <h1>{this.props.header}</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","const dropdownMenu = [\r\n  {\r\n    restaurant: 'EAT BKK',\r\n  picture: 'https://www.eatbkk.ca/wp-content/uploads/2018/09/42194716_10156607850029076_3483010978595995648_n.jpg'\r\n  },\r\n  {\r\n    restaurant: 'the Best Wonton',\r\n    picture:\r\n      'https://images.pexels.com/photos/955137/pexels-photo-955137.jpeg?cs=srgb&dl=pexels-buenosia-carol-955137.jpg&fm=jpg'\r\n  },\r\n  {\r\n    restaurant: 'Amazing Pasta',\r\n    picture:\r\n      'https://images.pexels.com/photos/546945/pexels-photo-546945.jpeg?cs=srgb&dl=pexels-maurijn-pach-546945.jpg&fm=jpg'\r\n  },\r\n  {\r\n    restaurant: 'Indian Taste',\r\n    picture:\r\n      'https://images.pexels.com/photos/958546/pexels-photo-958546.jpeg?cs=srgb&dl=pexels-chan-walrus-958546.jpg&fm=jpg'\r\n  }\r\n]\r\n\r\nexport default dropdownMenu\r\n","import React, { Component } from \"react\";\r\nimport dropdownMenu from \"./dropdownMenu.js\";\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cuisine: {},\r\n      resaturant: {},\r\n      display: [],\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    console.log(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ cuisine: e.target.value });\r\n\r\n    if (e.target.value === \"Thai\") {\r\n      this.setState({ resaturant: \"EAT BKK\" });\r\n    }\r\n  }\r\n  handleClick() {\r\n    this.setState({\r\n      display: (\r\n        <div>\r\n          {\" \"}\r\n          <h1> {dropdownMenu[0].restaurant}</h1>\r\n          <img\r\n            src={dropdownMenu[0].picture}\r\n            alt=\"EAT BKK Thai Kitchen with colorful poster on the wall,black and red chairs around a square table\"\r\n          ></img>\r\n        </div>\r\n      ),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // create a dropdown menu for cuisines\r\n      <main>\r\n        <label htmlFor={this.props.idOne}>Choose a cuisine: </label>\r\n        <select\r\n          id={this.props.idOne}\r\n          value={this.state.cuisine}\r\n          onChange={this.handleChange}\r\n        >\r\n          <option value=\"undefined\">choose...</option>\r\n          <option value=\"Thai\">Thai</option>\r\n          <option value=\"Chinese\">Chinese</option>\r\n          <option value=\"Italian\">Italian</option>\r\n          <option value=\"Indian\">Indian</option>\r\n        </select>\r\n\r\n        <label htmlFor={this.props.idTwo}>Choose a restaurant: </label>\r\n        <select\r\n          id={this.props.idTwo}\r\n          value={this.state.resaturant}\r\n          onChange={this.handleChange}\r\n        >\r\n          <option value=\"undefined\">choose...</option>\r\n          <option value=\"EAT BKK\">EAT BKK</option>\r\n          <option value=\"The Best Wonton\">The Best Wonton</option>\r\n        </select>\r\n        <button onClick={this.handleClick}>Submit</button>\r\n\r\n        <div>\r\n          {/* display restaurant name and image based on user selection */}\r\n          {this.state.display}\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// this part is for star rating\r\nimport React, { useState } from \"react\";\r\nimport { FaStar } from \"react-icons/fa\";\r\n\r\nconst Star = ({ selected = false, onSelect = (f) => f }) => (\r\n  <FaStar color={selected ? \"red\" : \"grey\"} onClick={onSelect} />\r\n);\r\n\r\nconst createArray = (length) => [...Array(length)];\r\n\r\nfunction StarRating({ totalStars = 5 }) {\r\n  const [selectedStars, setSelectedStars] = useState(0);\r\n  return (\r\n    <>\r\n      {createArray(totalStars).map((n, i) => (\r\n        <Star\r\n          key={i}\r\n          selected={selectedStars > i}\r\n          onSelect={() => setSelectedStars(i + 1)}\r\n        />\r\n      ))}\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default StarRating;\r\n","// this part is for user comments\r\nimport React, { Component } from \"react\";\r\nclass Comments extends Component {\r\n  render() {\r\n    return (\r\n      <section>\r\n        <input type=\"textarea\" placeholder=\"Add some comments\"></input>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comments;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport StarRating from \"./Rating\";\nimport Comments from \"./Comments\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\" wrapper App\">\n        <Header header=\"Reviews\"  />\n        <Main idOne=\"cuisines\" idTwo=\"restaurants\" />\n        <StarRating />\n        <Comments />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}